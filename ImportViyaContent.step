{"type":"code","name":"ImportViyaContent.step","displayName":"ImportViyaContent.step","description":"","templates":{"SAS":"%let BASE_URL = %sysfunc(getoption(servicesbaseurl));\n%put &BASE_URL;\n%let pkg_location = %scan(&pkg_location,2,\":\",\"MO\");\n\n\n/* -----------------------------------------------------------------------------------------*/\n%macro _identify_content_or_server(pathReference);\n   %global _path_identifier;\n   data _null_;\n      call symput(\"_path_identifier\", scan(\"&pathReference.\",1,\":\",\"MO\"));\n   run;\n%mend _identify_content_or_server;\n\n/* -----------------------------------------------------------------------------------------*/\n%macro _extract_sas_folder_path(pathReference);\n   %global _sas_folder_path;\n   data _null_;\n      call symput(\"_sas_folder_path\", scan(\"&pathReference.\",2,\":\",\"MO\"));\n   run;\n%mend _extract_sas_folder_path;\n\n/* -----------------------------------------------------------------------------------------*/\n%macro _obtain_sas_content_folder_uri(targetFolderContent);\n\n   %global targetFolderURI;\n   %global contentFolderExists;\n\n   /*-----------------------------------------------------------------------------------------*\n     Create a JSON payload containing the folder to check for.\n   *------------------------------------------------------------------------------------------*/\n   %local targetPathJSON;\n\n   data _null_;\n      call symput(\"targetPathJSON\",'{\"items\": ['||'\"'||transtrn(strip(transtrn(&targetFolderContent.,\"/\",\"   \")),\"   \",'\",\"')||'\"'||'], \"contentType\": \"folder\"}');\n   run;\n\n   filename pathData temp;\n   filename outResp temp;\n\n   data _null_;\n      length inputData $32767.;\n      inputData = symget(\"targetPathJSON\");\n      file pathData;\n\t  put inputData;\n   run;\n\n   /*-----------------------------------------------------------------------------------------*\n     Call the /folders/paths endpoint to obtain the URI of the desired folder.\n   *------------------------------------------------------------------------------------------*/\n   %local viyaHost;\n   %let viyaHost=%sysfunc(getoption(SERVICESBASEURL));\n\n   %put NOTE: The Viya host resolves to &viyaHost.;\n\n   proc http\n\t  method='POST'\n\t  url=\"&viyaHost./folders/paths\"\n\t  in=pathData \n\toauth_bearer=sas_services\n \tout=outResp;\n    ;\n\theaders 'Content-Type'='application/vnd.sas.content.folder.path+json';\n   quit;\n   \n   filename pathData clear;\n   filename outResp clear;\n\n   /*-----------------------------------------------------------------------------------------*\n     In the event of a successful request, extract the URI\n   *------------------------------------------------------------------------------------------*/\n\n   %if \"&SYS_PROCHTTP_STATUS_CODE.\"=\"200\" %then %do;\n\n      filename TEMPFNM filesrvc folderpath=&targetFolderContent.;\n\n    /*-----------------------------------------------------------------------------------------*\n      The Filename Filesrvc leads to an automatic macro variable which holds the URI.  This \n      will be assigned to the global variable.\n    *------------------------------------------------------------------------------------------*/\n      data _null_;\n\t     call symput(\"targetFolderURI\", \"&_FILESRVC_TEMPFNM_URI.\");\n         call symputx(\"contentFolderExists\", 1);\n      run;\n\n      filename TEMPFNM clear;\n      %symdel _FILESRVC_TEMPFNM_URI;\n\n   %end;\n   %else %do;\n\n      data _null_;\n         call symput(\"targetFolderURI\", \"Refer SYS_PROCHTTP_STATUS_CODE macro variable.\");\n         call symputx(\"_cff_error_flag\",1);\n      run;\n\n      /*-----------------------------------------------------------------------------------------*\n         Note that this macro also doubles up as a check for a desired folder inside \n         SAS Content.  While it's desirable to have separate code/macros for every single desired \n         operation, we are adding this additional output because it does not require significant \n         computation (beyond the code below).\n      *------------------------------------------------------------------------------------------*/\n\n      %if \"&SYS_PROCHTTP_STATUS_CODE.\"=\"404\" %then %do;\n\n         %put NOTE: Folder is not found. ;\n         data _null_;\n            call symputx(\"contentFolderExists\",0);\n         run;\n\n      %end;\n      %else %do;\n\n         %put ERROR: The HTTP request returned &SYS_PROCHTTP_STATUS_CODE. ;\n         data _null_;\n            call symputx(\"contentFolderExists\",99);\n         run;\n\n      %end;\n   %end;\n\n%mend _obtain_sas_content_folder_uri;\n/* -----------------------------------------------------------------------------------------*/\n\n%put(&pkg_location);\n\n/*-----------------------------------------------------------------------------------------*\n      Check if the source object provided is in fact a SAS Content related path.\n*------------------------------------------------------------------------------------------*/\n\n%_identify_content_or_server(&pkg_location);\n\n%if \"&_path_identifier.\"=\"sasserver\" %then %do;\n  %put NOTE: The path provided is prefixed with &_path_identifier. ;\n%end;\n%else %do;\n  %put ERROR: Path provided does not seem to be a SAS server folder. Check your path. ;\n%end;\n\n%_extract_sas_folder_path(&objectToExport);\n%_obtain_sas_content_folder_uri(\"&_sas_folder_path\");\n%put(&targetFolderURI);\n\n/*------------------------------------------------------------------------------------------*/\n\n%macro transfer_export(objectURI,pkgName);\n\n\t/* Create export job */\n\t%let pkg_full_name=&pkg_location.//&pkgName..json;\n\n\t%put \"&pkg_full_name\";\n\n\tFILENAME json_in temp ENCODING='UTF-8' ;\n\tFILENAME resp temp ENCODING='UTF-8' ;\n\tFILENAME json_PKG \"&pkg_full_name\" ENCODING='UTF-8' ;\n\n\tdata _null_;\n\t\tfile json_in;\n\t\tput '{'/\n\t\t  '\"name\" : \"'\"&pkgName.\"'\",'/\n\t\t  '\"items\": [\"'\"&objectURI.\"'\"],'/\n\t\t  '\"options\": {\"includeDependencies\":true}'/\n\t\t  '}';\n\trun;\n\n    proc http \n\t\toauth_bearer=sas_services \n\t\tmethod=\"POST\" url=\"&BASE_URL/transfer/exportJobs\" in=json_in out=resp;\n        headers \n\t\t\t\"Accept\"=\"application/json\"\n\t\t\t\"Content-type\"=\"application/vnd.sas.transfer.export.request+json\";\n\t\tdebug level=3;\n\trun;\n\n\tLIBNAME resp clear;\n\tLIBNAME resp json;\n\t\n\tproc sql noprint;\n\t  select id into :job_id trimmed from resp.root;\n\tquit;\n\n\t%put &job_id;\n\n\t/* Wait until the job is completed */\n\n\t%wait_transfer_exportjob(&job_id, sleep=1, maxloop=120);\n\n\t/* Get the resulting export package URI */\n\n\tproc http method='GET' url=\"&BASE_URL/transfer/exportJobs/&job_id\" oauth_bearer=sas_services out=resp;\n\t  headers\n\t    \"Accept\" = \"application/json\";\n\t  debug level=0;\n\trun;\n\tLIBNAME resp clear;\n\tLIBNAME resp json;\n\n\tproc sql noprint;\n\t  select packageUri into :pkg_uri trimmed from resp.root;\n\tquit;\n\t\n\t%put &pkg_uri;\n\n\t/* Download the resulting export package */\n\n\tproc http method='GET' url=\"&BASE_URL/&pkg_uri\" oauth_bearer=sas_services out=json_PKG;\n\t  headers\n\t    \"Accept\" = \"application/vnd.sas.transfer.package+json\"\n    \t\"Accept-encoding\" = \"gzip, deflate, br, zstd\";\n\t  debug level=0;\n\trun;\n\n\t/* Delete the remaining export package from the sas content */\n\t\n%mend;\n\n/* Macro to wait for an export job to be completed using REST API (tested on 2024.08) */\n%macro wait_transfer_exportjob(jobid, sleep=1, maxloop=120);\n%local jobStatus i;\n\n%do i = 1 %to &maxLoop;\n  filename jobrc temp  ENCODING='UTF-8';\n  proc http method='GET' url=\"&BASE_URL/transfer/exportJobs/&jobid/state\" oauth_bearer=sas_services out=jobrc verbose;\n    headers\n      \"Accept\" = \"text/plain\";\n    debug level=0;\n  run;\n  \n  %put NOTE: response check job status;\n  data _null_;\n      infile jobrc;\n      input line : $32.;\n      putlog \"NOTE: &sysmacroname jobId=&jobid i=&i status=\" line;\n      if line in (\"completed\", \"failed\") then do;\n      end;\n      else do;\n        putlog \"NOTE: &sysmacroname &jobid status=\" line \"sleep for &sleep.sec\";\n        rc = sleep(&sleep, 1);\n      end;  \n      call symputx(\"jobstatus\", line);\n  run;\n  %put Dbg: &=jobstatus;\n  filename jobrc clear;\n  %if &jobstatus = completed %then %do;\n    %put NOTE: &sysmacroname &=jobid &=jobStatus;\n    %return;\n  %end;\n  %if &jobstatus = failed %then %do;\n    %put ERROR: &sysmacroname &=jobid &=jobStatus;\n    %return;\n  %end;\n%end;\n%mend wait_transfer_exportjob;\n\n%transfer_export(&targetFolderURI,&pkgName);\n"},"properties":{},"ui":"{\n\t\"showPageContentOnly\": true,\n\t\"pages\": [\n\t\t{\n\t\t\t\"id\": \"page1\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Page 1\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"pkg_location\",\n\t\t\t\t\t\"type\": \"path\",\n\t\t\t\t\t\"label\": \"Folder from which json packages to import :\",\n\t\t\t\t\t\"pathtype\": \"folder\",\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"syntaxversion\": \"1.3.0\",\n\t\"values\": {\n\t\t\"pkg_location\": \"\"\n\t}\n}","flowMetadata":{"inputPorts":[],"outputPorts":[]}}